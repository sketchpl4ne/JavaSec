package com.example.utils;

import java.io.*;
import java.util.Base64;

public class SerializeUtils {
    public static void serialize(Object o) throws Exception {
        FileOutputStream fos = new FileOutputStream("object.ser");
        ObjectOutputStream os = new ObjectOutputStream(fos);
        os.writeObject(o);
        os.close();
        fos.close();
        System.out.println("序列化完成...");
    }

    public static void unserialize() throws Exception {
        FileInputStream fis = new FileInputStream("object.ser");
        ObjectInputStream ois = new ObjectInputStream(fis);
        Object o = ois.readObject();
        ois.close();
        fis.close();
        System.out.println("反序列化完成...");
    }

    public static String serializeToBase64(Object object) throws Exception {
        byte[] serializedBytes = serializeToBytes(object);
        return Base64.getEncoder().encodeToString(serializedBytes);
    }

    public static Object unserializeFromBase64(String base64String) throws Exception {
        byte[] decodedBytes = Base64.getDecoder().decode(base64String);
        return unserializeFromBytes(decodedBytes);
    }

    public static byte[] serializeToBytes(Object object) throws Exception {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
        objectOutputStream.writeObject(object);
        objectOutputStream.close();
        return byteArrayOutputStream.toByteArray();
    }

    public static Object unserializeFromBytes(byte[] bytes) throws Exception {
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);
        ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
        Object deserializedObject = objectInputStream.readObject();
        objectInputStream.close();
        return deserializedObject;
    }
}
